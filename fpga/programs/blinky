--------------------------------------------
TURN LED ON

0100 0000 0000 0000 // load 16384 into A - J3 | 0
1110 111111 001 000 // load 1 into M[A] | 1
--------------------------------------------

WAIT ONE SECOND

// M[2] = 0
0000 0000 0000 0010 // load 2 into A - J2 | 2
1110 101010 001 000 // load 0 into M[A] | 3

// M[1] = 0
0000 0000 0000 0001 // load 1 into A - J1 | 4
1110 101010 001 000 // load 0 into M[A] | 5

// M[0] = 0
0000 0000 0000 0000 // load 0 into A - J0 | 6
1110 101010 001 000 // load 0 into M[A] | 7

// M[0]++
0000 0000 0000 0000 // load 0 into A | 8
1111 110111 001 000 // load M[A] + 1 into M[A] | 9

// if M[0] - 100 < 0, jump to J0
0000 0000 0110 0011 // load 100 into A | 10
1110 110000 010 000 // load A into D | 11
0000 0000 0000 0110 // load J0 into A | 12
1111 000111 000 100 // if M[A] - D < 0, jump  | 13

// M[1]++
0000 0000 0000 0001 // load 1 into A | 14
1111 110111 001 000 // load M[A] + 1 into M[A] | 15

// if M[1] - 1000 < 0, jump to J1
0000 0011 1110 1000 // load 1000 into A | 16
1110 110000 010 000 // load A into D | 17
0000 0000 0000 0100 // load J1 into A | 18
1111 000111 000 100 // if M[A] - D < 0, jump | 19

// M[2]++
0000 0000 0000 0010 // load 2 into A | 20
1111 110111 001 000 // load M[A] + 1 into M[A] | 21

// if M[2] - 1000 < 0, jump to J2
0000 0011 1110 1000 // load 1000 into A | 22
1110 110000 010 000 // load A into D | 23
0000 0000 0000 0010 // load J2 into A | 24
1111 000111 000 100 // if M[A] - D < 0, jump | 25

--------------------------------------------
TURN LED OFF

0100 0000 0000 0000 // load 16384 into A | 26
1110 101010 001 000 // load 0 into M[A] | 27
--------------------------------------------

WAIT ONE SECOND

// M[2] = 0
0000 0000 0000 0010 // load 2 into A - J2 | 28
1110 101010 001 000 // load 0 into M[A] | 29

// M[1] = 0
0000 0000 0000 0001 // load 1 into A - J1 | 30
1110 101010 001 000 // load 0 into M[A] | 31

// M[0] = 0
0000 0000 0000 0000 // load 0 into A - J0 | 32
1110 101010 001 000 // load 0 into M[A] | 33

// M[0]++
0000 0000 0000 0000 // load 0 into A | 34
1111 110111 001 000 // load M[A] + 1 into M[A] | 35

// if M[0] - 100 < 0, jump to J0
0000 0000 0110 0100 // load 100 into A | 36
1110 110000 010 000 // load A into D | 37
0000 0000 0010 0000  // load J0 into A | 38
1111 000111 000 100 // if M[A] - D < 0, jump | 39 // TODO - this is clearly wrong

// M[1]++
0000 0000 0000 0001 // load 1 into A | 40
1111 110111 001 000 // load M[A] + 1 into M[A] | 41

// if M[1] - 1000 < 0, jump to J1
0000 0011 1110 1000 // load 1000 into A | 42
1110 110000 010 000 // load A into D | 43
0000 0000 0001 1110 // load J1 into A | 44
1111 000111 000 100 // if M[A] - D < 0, jump | 45

// M[2]++
0000 0000 0000 0010 // load 2 into A | 46
1111 110111 001 000 // load M[A] + 1 into M[A] | 47

// if M[2] - 1000 < 0, jump to J2
0000 0011 1110 1000 // load 1000 into A | 48
1110 110000 010 000 // load A into D | 49
0000 0000 0001 1100 // load J2 into A | 50
1111 000111 000 100 // if M[A] - D < 0, jump | 51

--------------------------------------------

0000 0000 0000 0000 // load j3 into A | 52
1110 101010 000 111 // jump to j3 | 53
