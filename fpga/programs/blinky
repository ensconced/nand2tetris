--------------------------------------------
TURN LED OFF

0100 0000 0000 0000 // load 16384 into A - J3
1110 101010 001 000 // load 0 into M[A]
--------------------------------------------

WAIT ONE SECOND

// M[2] = 0
0000 0000 0000 0010 // load 2 into A - J2
1110 101010 001 000 // load 0 into M[A]

// M[1] = 0
0000 0000 0000 0001 // load 1 into A - J1
1110 101010 001 000 // load 0 into M[A]

// M[0] = 0
0000 0000 0000 0000 // load 0 into A - J0
1110 101010 001 000 // load 0 into M[A]

// M[0]++
0000 0000 0000 0000 // load 0 into A
1111 110111 001 000 // load M[A] + 1 into M[A]

// if M[0] - 100 < 0, jump to J0
0000 0000 0110 0011 // load 100 into A
1110 110000 010 000 // load A into D
0000 0000 0000 .... // load J0 into A
1111 000111 000 100 // if M[A] - D < 0, jump

// M[1]++
0000 0000 0000 0001 // load 1 into A
1111 110111 001 000 // load M[A] + 1 into M[A]

// if M[1] - 1000 < 0, jump to J1
0000 0011 1110 1000 // load 1000 into A
1110 110000 010 000 // load A into D
0000 0000 0000 .... // load J1 into A
1111 000111 000 100 // if M[A] - D < 0, jump

// M[2]++
0000 0000 0000 0010 // load 2 into A
1111 110111 001 000 // load M[A] + 1 into M[A]

// if M[2] - 1000 < 0, jump to J2
0000 0011 1110 1000 // load 1000 into A
1110 110000 010 000 // load A into D
0000 0000 0000 .... // load J2 into A
1111 000111 000 100 // if M[A] - D < 0, jump

--------------------------------------------
TURN LED ON

0100 0000 0000 0000 // load 16384 into A
1110 111111 001 000 // load 1 into M[A]
--------------------------------------------

WAIT ONE SECOND

// M[2] = 0
0000 0000 0000 0010 // load 2 into A - J2
1110 101010 001 000 // load 0 into M[A]

// M[1] = 0
0000 0000 0000 0001 // load 1 into A - J1
1110 101010 001 000 // load 0 into M[A]

// M[0] = 0
0000 0000 0000 0000 // load 0 into A - J0
1110 101010 001 000 // load 0 into M[A]

// M[0]++
0000 0000 0000 0000 // load 0 into A
1111 110111 001 000 // load M[A] + 1 into M[A]

// if M[0] - 100 < 0, jump to J0
0000 0000 0110 0011 // load 100 into A
1110 110000 010 000 // load A into D
0000 0000 0000 .... // load J0 into A
1111 000111 000 100 // if M[A] - D < 0, jump

// M[1]++
0000 0000 0000 0001 // load 1 into A
1111 110111 001 000 // load M[A] + 1 into M[A]

// if M[1] - 1000 < 0, jump to J1
0000 0011 1110 1000 // load 1000 into A
1110 110000 010 000 // load A into D
0000 0000 0000 .... // load J1 into A
1111 000111 000 100 // if M[A] - D < 0, jump

// M[2]++
0000 0000 0000 0010 // load 2 into A
1111 110111 001 000 // load M[A] + 1 into M[A]

// if M[2] - 1000 < 0, jump to J2
0000 0011 1110 1000 // load 1000 into A
1110 110000 010 000 // load A into D
0000 0000 0000 .... // load J2 into A
1111 000111 000 100 // if M[A] - D < 0, jump

--------------------------------------------

0000 0000 0000 .... // load j3 into A
1110 101010 000 111 // jump to j3
